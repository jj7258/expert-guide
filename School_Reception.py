# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'School_Reception.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import sys
import os
import ctypes

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QSystemTrayIcon, QMenu
from PyQt5.QtGui import QIcon

import MainWindow
import Slideshow

from aboutUs_Win import Ui_aboutUs

import requests
from Google_Drive import GoogleDriveWorker


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):

        self.tray_icon = None # Initialize the tray icon attribute
        self.setup_system_tray_icon(MainWindow)


        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1600, 852)
        MainWindow.setStyleSheet("background-image: url(:/Background/magicpattern-gradient-1690353787077.jpeg);")
        MainWindow.setWindowIcon(QtGui.QIcon(':/Icons/school.png'))  # Attribution: <a href="https://www.flaticon.com/free-icons/school" title="school icons">School icons created by Freepik - Flaticon</a>

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_12 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_12.setContentsMargins(29, -1, 29, -1)
        self.gridLayout_12.setHorizontalSpacing(6)
        self.gridLayout_12.setVerticalSpacing(30)
        self.gridLayout_12.setObjectName("gridLayout_12")
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setStyleSheet("QWidget{\n""background: transparent;\n""}")
        self.widget.setObjectName("widget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.widget)
        self.gridLayout_2.setContentsMargins(15, 15, 15, 15)
        self.gridLayout_2.setHorizontalSpacing(26)
        self.gridLayout_2.setVerticalSpacing(28)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.ContactUs_Button_2 = QtWidgets.QPushButton(self.widget, clicked=lambda: self.openWindow('ContactUs_Win'))
        self.ContactUs_Button_2.setStyleSheet("QPushButton{\n"
"background-color: none;\n"
"color:white;\n"
"border-width: 2px;\n"
"font:bold 25px;\n"
"border-radius: 8px;\n"
"padding: 5px;\n"
"border: 2px solid blue;\n"
"border-style: groove;\n"
"}\n"
"QPushButton:hover\n"
"{\n"
"border-color: white;\n"
"border-style:solid;\n"
"border-width: 2px;\n"
"}\n"
"QPushButton:pressed\n"
"{\n"
"border-style:solid;\n"
"border-width: 2px;\n"
"border-color: rgb(0, 170, 0);\n"
"}")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/Icons/contactUs.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.ContactUs_Button_2.setIcon(icon)
        self.ContactUs_Button_2.setIconSize(QtCore.QSize(40, 40))
        self.ContactUs_Button_2.setObjectName("ContactUs_Button_2")
        self.ContactUs_Button_2.clicked.connect(lambda: self.user_response_button('Contact Us'))
        self.gridLayout_2.addWidget(self.ContactUs_Button_2, 3, 0, 1, 1)
        self.Academics_Button_3 = QtWidgets.QPushButton(self.widget, clicked=lambda: self.openWindow('Academics_Win'))
        font = QtGui.QFont()
        font.setPointSize(-1)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.Academics_Button_3.setFont(font)
        self.Academics_Button_3.setStyleSheet("QPushButton{\n"
"background-color: none;\n"
"color:white;\n"
"border-width: 2px;\n"
"font:bold 25px;\n"
"border-radius: 8px;\n"
"padding: 5px;\n"
"border: 2px solid blue;\n"
"border-style: groove;\n"
"}\n"
"QPushButton:hover\n"
"{\n"
"border-color: white;\n"
"border-style:solid;\n"
"border-width: 2px;\n"
"}\n"
"QPushButton:pressed\n"
"{\n"
"border-style:solid;\n"
"border-width: 2px;\n"
"border-color: rgb(0, 170, 0);\n"
"}")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/Icons/academics_Win_icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.Academics_Button_3.setIcon(icon1)
        self.Academics_Button_3.setIconSize(QtCore.QSize(40, 40))
        self.Academics_Button_3.setObjectName("Academics_Button_3")
        self.Academics_Button_3.clicked.connect(lambda: self.user_response_button('Academics'))
        self.Academics_Button_3.clicked.connect(MainWindow.close)
        self.gridLayout_2.addWidget(self.Academics_Button_3, 0, 0, 1, 1)
        self.AboutUs_Button_2 = QtWidgets.QPushButton(self.widget, clicked=lambda: self.openWindow('aboutUs_Win'))
        self.AboutUs_Button_2.setStyleSheet("QPushButton{\n"
"background-color: none;\n"
"color:white;\n"
"border-width: 2px;\n"
"font:bold 25px;\n"
"border-radius: 8px;\n"
"padding: 5px;\n"
"border: 2px solid blue;\n"
"border-style: groove;\n"
"}\n"
"QPushButton:hover\n"
"{\n"
"border-color: white;\n"
"border-style:solid;\n"
"border-width: 2px;\n"
"}\n"
"QPushButton:pressed\n"
"{\n"
"border-style:solid;\n"
"border-width: 2px;\n"
"border-color: rgb(0, 170, 0);\n"
"}")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/Icons/aboutUs.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.AboutUs_Button_2.setIcon(icon2)
        self.AboutUs_Button_2.setIconSize(QtCore.QSize(40, 40))
        self.AboutUs_Button_2.setObjectName("AboutUs_Button_2")
        self.AboutUs_Button_2.clicked.connect(lambda: self.user_response_button('aboutUs'))
        self.gridLayout_2.addWidget(self.AboutUs_Button_2, 3, 1, 1, 1)
        self.Faculty_Button_3 = QtWidgets.QPushButton(self.widget, clicked=lambda: self.openWindow('Faculty_Win'))
        font = QtGui.QFont()
        font.setPointSize(-1)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.Faculty_Button_3.setFont(font)
        self.Faculty_Button_3.setStyleSheet("QPushButton{\n"
"background-color: none;\n"
"color:white;\n"
"border-width: 2px;\n"
"font:bold 25px;\n"
"border-radius: 8px;\n"
"padding: 5px;\n"
"border: 2px solid blue;\n"
"border-style: groove;\n"
"}\n"
"QPushButton:hover\n"
"{\n"
"border-color: white;\n"
"border-style:solid;\n"
"border-width: 2px;\n"
"}\n"
"QPushButton:pressed\n"
"{\n"
"border-style:solid;\n"
"border-width: 2px;\n"
"border-color: rgb(0, 170, 0);\n"
"}")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(":/Icons/faculty_Win_icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.Faculty_Button_3.setIcon(icon3)
        self.Faculty_Button_3.setIconSize(QtCore.QSize(40, 40))
        self.Faculty_Button_3.setObjectName("Faculty_Button_3")
        self.Faculty_Button_3.clicked.connect(lambda: self.user_response_button('Faculty'))
        self.Faculty_Button_3.clicked.connect(MainWindow.close)
        self.gridLayout_2.addWidget(self.Faculty_Button_3, 0, 1, 1, 1)
        self.BusTimes_Button_3 = QtWidgets.QPushButton(self.widget, clicked=lambda: self.openWindow('BusTimes_Win'))
        font = QtGui.QFont()
        font.setPointSize(-1)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.BusTimes_Button_3.setFont(font)
        self.BusTimes_Button_3.setStyleSheet("QPushButton{\n"
"background-color: none;\n"
"color:white;\n"
"border-width: 2px;\n"
"font:bold 25px;\n"
"border-radius: 8px;\n"
"padding: 5px;\n"
"border: 2px solid blue;\n"
"border-style: groove;\n"
"}\n"
"QPushButton:hover\n"
"{\n"
"border-color: white;\n"
"border-style:solid;\n"
"border-width: 2px;\n"
"}\n"
"QPushButton:pressed\n"
"{\n"
"border-style:solid;\n"
"border-width: 2px;\n"
"border-color: rgb(0, 170, 0);\n"
"}")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(":/Icons/busInfo_Win_icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.BusTimes_Button_3.setIcon(icon4)
        self.BusTimes_Button_3.setIconSize(QtCore.QSize(40, 40))
        self.BusTimes_Button_3.setObjectName("BusTimes_Button_3")
        self.BusTimes_Button_3.clicked.connect(lambda: self.user_response_button('Bus_Times'))
        self.BusTimes_Button_3.clicked.connect(MainWindow.close)
        self.gridLayout_2.addWidget(self.BusTimes_Button_3, 2, 0, 1, 1)
        self.Facilities_Button_3 = QtWidgets.QPushButton(self.widget,  clicked=lambda: self.openWindow('Facilities_Win'))
        self.Facilities_Button_3.setStyleSheet("QPushButton{\n"
"background-color: none;\n"
"color:white;\n"
"border-width: 2px;\n"
"font:bold 25px;\n"
"border-radius: 8px;\n"
"padding: 5px;\n"
"border: 2px solid blue;\n"
"border-style: groove;\n"
"}\n"
"QPushButton:hover\n"
"{\n"
"border-color: white;\n"
"border-style:solid;\n"
"border-width: 2px;\n"
"}\n"
"QPushButton:pressed\n"
"{\n"
"border-style:solid;\n"
"border-width: 2px;\n"
"border-color: rgb(0, 170, 0);\n"
"}")
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(":/Icons/facilities_Win_icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.Facilities_Button_3.setIcon(icon5)
        self.Facilities_Button_3.setIconSize(QtCore.QSize(40, 40))
        self.Facilities_Button_3.setObjectName("Facilities_Button_3")
        self.Facilities_Button_3.clicked.connect(lambda: self.user_response_button('Facilities'))
        self.gridLayout_2.addWidget(self.Facilities_Button_3, 2, 1, 1, 1)

        self.gridLayout_12.addWidget(self.widget, 3, 0, 4, 1)
        self.Weather = QtWidgets.QWidget(self.centralwidget)
        self.Weather.setMaximumSize(QtCore.QSize(800, 300))
        self.Weather.setStyleSheet("QWidget{\n"
"background: transparent;\n"
"}")
        self.Weather.setObjectName("Weather")
        self.gridLayout_12.addWidget(self.Weather, 1, 0, 2, 1)

        # Add a QLabel for displaying the current time
        self.time_label = QtWidgets.QLabel(self.Weather)
        self.time_label.setGeometry(QtCore.QRect(150, 20, 440, 60))
        font = QtGui.QFont()
        font.setPointSize(26)
        self.time_label.setFont(font)
        self.time_label.setAlignment(QtCore.Qt.AlignLeft)
        self.time_label.setScaledContents(True)
        self.time_label.setStyleSheet("QLabel{\n""color: white;\n""}")

        # Call the update_time method to set the initial time and start updating the time
        self.update_time()

        self.weather_label = QtWidgets.QLabel(self.Weather)
        self.weather_label.setGeometry(QtCore.QRect(600, 90, 100, 60))
        self.weather_label.setAlignment(QtCore.Qt.AlignRight)  # Align text to center
        self.weather_label.setStyleSheet("QLabel{\n""color: white;\n""font-size: 20px;\n""}")
        self.weather_label.setObjectName("weather_label")

        self.temperature_label = QtWidgets.QLabel(self.Weather)
        self.temperature_label.setGeometry(QtCore.QRect(80, 90, 550, 60))
        font = QtGui.QFont()
        font.setPointSize(26)
        self.temperature_label.setFont(font)
        self.temperature_label.setAlignment(QtCore.Qt.AlignCenter)  # Align text to center
        self.temperature_label.setStyleSheet("QLabel{\n""color: white;\n""}")
        self.temperature_label.setScaledContents(True)
        self.temperature_label.setObjectName("temperature_label")

        self.update_weather()

        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setSpacing(196)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_3.sizePolicy().hasHeightForWidth())
        self.label_3.setSizePolicy(sizePolicy)
        self.label_3.setMinimumSize(QtCore.QSize(201, 101))
        self.label_3.setStyleSheet("QLabel{\n"
"background: transparent;\n"
"    image: url(:/Background/SchoolLogo.png);\n"
"}")
        self.label_3.setObjectName("label_3")
        self.horizontalLayout.addWidget(self.label_3)
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setStyleSheet("QLabel{\n"
"background: transparent;\n"
"}")
        self.label_2.setObjectName("label_2")
        self.horizontalLayout.addWidget(self.label_2)
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setMinimumSize(QtCore.QSize(161, 111))
        self.label_4.setStyleSheet("QLabel\n"
"{\n"
"image: url(:/Background/uniqueLogo.png);\n"
"background: transparent;\n"
"}")
        self.label_4.setText("")
        self.label_4.setObjectName("label_4")
        self.horizontalLayout.addWidget(self.label_4)
        self.gridLayout_12.addLayout(self.horizontalLayout, 0, 0, 1, 2)

        self.Slideshow = QtWidgets.QWidget(self.centralwidget)
        self.Slideshow.setMinimumSize(QtCore.QSize(700, 720))
        self.Slideshow.setMaximumSize(QtCore.QSize(770, 720))
        self.Slideshow.setStyleSheet("QWidget\n"
"{\n"
"background: transparent;\n"
"}")
        self.Slideshow.setObjectName("Slideshow")
        self.gridLayout_12.addWidget(self.Slideshow, 1, 1, 6, 1)
        MainWindow.setCentralWidget(self.centralwidget)

        self.Slideshow.setGeometry(QtCore.QRect(810, 180, 770, 720))
        self.Slideshow.setStyleSheet("QWidget\n"
                                    "{\n"
                                    "background: transparent;\n"
                                    "}")
        self.Slideshow.setObjectName("Slideshow")
        MainWindow.setCentralWidget(self.centralwidget)

        self.slideshow_label = QtWidgets.QLabel(self.Slideshow)
        self.slideshow_label.setGeometry(QtCore.QRect(0, 0, 750, 750))
        self.slideshow_label.setAlignment(QtCore.Qt.AlignCenter)
        self.slideshow_label.setStyleSheet("QLabel{\n""background: transparent;\n""}")
        self.slideshow_label.setObjectName("slideshow_label")


        self.placeholder_pixmap = QtGui.QPixmap(":/Image/Mar Thoma Central School Placeholder Image.jpg")
        self.placeholder_pixmap = self.placeholder_pixmap.scaled(770, 710, QtCore.Qt.KeepAspectRatio,
                                                                 QtCore.Qt.SmoothTransformation)

        self.slideshow_label.setPixmap(self.placeholder_pixmap)

        self.image_index = 0
        self.image_list = self.load_images_from_folder("C:/Users/joelj/OneDrive/Documents/Programming/PycharmProjects/UWR_Internship/Google Drive Images/Slideshow")
        self.start_slideshow_with_timer()

        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)


        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.ContactUs_Button_2.setText(_translate("MainWindow", "  Contact Us"))
        self.Academics_Button_3.setText(_translate("MainWindow", "  Academics"))
        self.AboutUs_Button_2.setText(_translate("MainWindow", "  About Us"))
        self.Faculty_Button_3.setText(_translate("MainWindow", "  Faculty"))
        self.BusTimes_Button_3.setText(_translate("MainWindow", "  Bus Times"))
        self.Facilities_Button_3.setText(_translate("MainWindow", " Facilities"))
        self.label_3.setText(_translate("MainWindow", "<html><head/><body><p><br/></p></body></html>"))
        self.label_2.setWhatsThis(_translate("MainWindow", "<html><head/><body><p align=\"center\"><br/></p><p align=\"center\"><br/></p></body></html>"))
        self.label_2.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:24pt; font-weight:600; color:#ffffff;\">Welcome to Mar Thoma Central School</span></p><p align=\"center\"><span style=\" font-size:24pt; font-weight:600; color:#ffffff;\">How may we help you today ?</span></p></body></html>"))

    def setup_system_tray_icon(self,MainWindow):
        self.tray_icon = QSystemTrayIcon(MainWindow)
        self.tray_icon.setIcon(QIcon(':/Icons/kioskIcon.png'))
        self.tray_icon.setToolTip("Kiosk")

        # Create a menu for the system tray icon
        self.tray_menu = QMenu(MainWindow)

        self.exit_action = self.tray_menu.addAction("Exit")

        # Connect actions to functions
        self.exit_action.triggered.connect(self.exit_application)

        # Set the menu for the tray icon
        self.tray_icon.setContextMenu(self.tray_menu)

        # Show the tray icon
        self.tray_icon.show()

    def exit_application(self):
        # Stop the slideshow timer if it's running
        if hasattr(self, 'slideshow_timer') and self.slideshow_timer.isActive():
            self.slideshow_timer.stop()
        QtWidgets.QApplication.quit()

    def update_weather(self):
        # Replace YOUR_API_KEY with your actual API key from OpenWeatherMap
        api_key = "4873b42104039d4d121280efa2e8b03d"
        city = "Kerala,IN"  # You can change this to your desired city
        units = "metric"  # You can use "imperial" for Fahrenheit
        url = f"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}&units={units}"

        try:
            response = requests.get(url)
            data = response.json()

            # Extract weather information
            weather_description = data["weather"][0]["description"].capitalize()
            temperature = data["main"]["temp"]
            icon_code = data["weather"][0]["icon"]

            # Get the weather icon URL from OpenWeatherMap
            icon_url = f"http://openweathermap.org/img/wn/{icon_code}.png"

            # Update the weather label and temperature label
            icon_data = requests.get(icon_url).content
            pixmap = QtGui.QPixmap()
            pixmap.loadFromData(icon_data)
            pixmap = pixmap.scaled(64, 64, QtCore.Qt.KeepAspectRatio, QtCore.Qt.SmoothTransformation)  # Increased size by 4 pixels
            self.weather_label.setPixmap(pixmap)
            self.temperature_label.setText("Weather: "+f"{temperature:.1f}°C, {weather_description}")
        except requests.exceptions.RequestException as e:
            # Handle the case if there's an error in fetching data
            print("Error:", e)

        # Update the weather every 10 minutes (600,000 milliseconds)
        QtCore.QTimer.singleShot(600000, self.update_weather)
    def update_time(self):
        # Get the current time
        current_time = QtCore.QTime.currentTime()

        # Convert the time to a string in the desired format
        time_text = current_time.toString("hh:mm AP")

        # Update the time label
        self.time_label.setText("Time: "+time_text)

        # Update the time every second (1000 milliseconds)
        QtCore.QTimer.singleShot(1000, self.update_time)

    def user_response_button(self, button):
        """
        This function prints which button(s) user has clicked

        :param button:
        :return string:
        """
        if button == 'Academics':
            print("Academics Pressed")
        elif button == 'Facilities':
            print("Facilities Pressed")
        elif button == "Faculty":
            print("Faculty Pressed")
        elif button == "Bus_Times":
            print("Bus Times Pressed")
        else:
            print("About Us Pressed")

    def openWindow(self, window):
        """
        This function is responsible for opening different windows based off the buttons
        from the main window

        :param window:
        :return:
        """
        if window == 'Academics_Win':
            from Academics_Win import Ui_Academics_Win
            self.window = QtWidgets.QDialog()
            self.ui = Ui_Academics_Win()
            self.ui.setupUi(self.window)
            self.window.show()
            print("Academics Window Opened")
        elif window == 'Facilities_Win':
            from Facilities_Win import Ui_Facilities
            self.window = QtWidgets.QMainWindow()
            self.ui = Ui_Facilities()
            self.ui.setupUi(self.window)
            self.window.show()
            print("Facilities Window Opened")
        elif window == 'Faculty_Win':
            from Faculty_Win import Ui_Faculty
            self.window = QtWidgets.QDialog()
            self.ui = Ui_Faculty()
            self.ui.setupUi(self.window)
            self.window.show()
            print("Facilities Window Opened")
        elif window == "BusTimes_Win":
            from BusTimes_Win import Ui_busInfo
            self.window = QtWidgets.QDialog()
            self.ui = Ui_busInfo()
            self.ui.setupUi(self.window)
            self.window.show()
            print("Bus Times Window Opened")
        else:
            self.window = QtWidgets.QMainWindow()
            self.ui = Ui_aboutUs()
            self.ui.setupUi(self.window)
            self.window.show()
            print("About Us Window Opened")

    def load_images_from_folder(self, folder_path):
        images = []
        for filename in os.listdir(folder_path):
            if filename.endswith(".jpg") or filename.endswith(".png"):
                images.append(os.path.join(folder_path, filename))
        return images

    def update_slideshow_image(self):
        self.image_list = self.load_images_from_folder(
            "C:/Users/joelj/OneDrive/Documents/Programming/PycharmProjects/UWR_Internship/Google Drive Images/Slideshow")
        if len(self.image_list) > 0:
            # Load the next image in the list
            self.image_index = (self.image_index + 1) % len(self.image_list)
            image_path = self.image_list[self.image_index]
            pixmap = QtGui.QPixmap(image_path)
            pixmap = pixmap.scaled(770, 710, QtCore.Qt.KeepAspectRatio, QtCore.Qt.SmoothTransformation)
            self.slideshow_label.setPixmap(pixmap)
        else:
            # Show the placeholder image if there are no images to show
            self.slideshow_label.setPixmap(self.placeholder_pixmap)

    def start_slideshow_with_timer(self):
        self.image_list = self.load_images_from_folder(
            "C:/Users/joelj/OneDrive/Documents/Programming/PycharmProjects/UWR_Internship/Google Drive Images/Slideshow"
        )
        if len(self.image_list) > 0:
            # Load the first image in the list
            image_path = self.image_list[self.image_index]
            pixmap = QtGui.QPixmap(image_path)
            pixmap = pixmap.scaled(770, 710, QtCore.Qt.KeepAspectRatio, QtCore.Qt.SmoothTransformation)
            self.slideshow_label.setPixmap(pixmap)

        # Check if the slideshow timer is already running, and only start it if it's not
        if not hasattr(self, 'slideshow_timer') or not self.slideshow_timer.isActive():
            # Set up the slideshow timer
            self.slideshow_timer = QtCore.QTimer(self.Slideshow)
            self.slideshow_timer.timeout.connect(self.update_slideshow_image)

            # Set the interval of the slideshow timer to 1 minute (60,000 milliseconds)
            interval_duration = 60000  # 60 seconds = 1 minute
            self.slideshow_timer.start(interval_duration)


if __name__ == "__main__":

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)

    # Taskbar Icon code segment
    myappid = 'mycompany.myproduct.subproduct.version'  # arbitrary string
    ctypes.windll.shell32.SetCurrentProcessExplicitAppUserModelID(myappid)

    # Create an instance of the GoogleDriveWorker and move it to the GUI thread
    google_drive_worker = GoogleDriveWorker()
    google_drive_worker.moveToThread(app.thread())  # Move the worker to the application's thread

    # Connect the signal from the worker to the slot in the GUI to start the slideshow timer
    google_drive_worker.new_image_downloaded.connect(ui.start_slideshow_with_timer)

    # Start the Google Drive synchronization in the worker's thread
    google_drive_thread = QtCore.QThread()
    google_drive_worker.new_image_downloaded.connect(google_drive_thread.quit)  # Quit the thread when the work is done
    google_drive_worker.new_image_downloaded.connect(google_drive_worker.deleteLater)  # Clean up the worker
    google_drive_worker.moveToThread(google_drive_thread)  # Move the worker to the thread
    google_drive_thread.started.connect(google_drive_worker.start_sync)  # Start the synchronization
    google_drive_thread.start()

    MainWindow.show()
    sys.exit(app.exec_())

