# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'School_Reception.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import os

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QDate, QTime, Qt, QTimer
from PyQt5.QtGui import QPixmap

from pyowm.owm import OWM

from Academics_Win import Ui_Academics
from Facilities_Win import Ui_Facilities
from Faculty_Win import Ui_Faculty
from BusTimes_Win import Ui_busInfo
from aboutUs_Win import Ui_aboutUs

entries = os.listdir('slideshow/')

class Ui_MainWindow(object):


    def setupUi(self, MainWindow):

        buttonFontsize = 12
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1227, 719)
        palette = QtGui.QPalette()
        MainWindow.setPalette(palette)
        MainWindow.setAutoFillBackground(False)
        MainWindow.setStyleSheet("")
        MainWindow.setWindowIcon(QtGui.QIcon('Icons/school.png')) # Attribution: <a href="https://www.flaticon.com/free-icons/school" title="school icons">School icons created by Freepik - Flaticon</a>

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.welcome_school_name = QtWidgets.QLabel(self.centralwidget)
        self.welcome_school_name.setGeometry(QtCore.QRect(60, 40, 1141, 41))
        palette = QtGui.QPalette()
        self.welcome_school_name.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("SansSerif")
        font.setPointSize(20)

        self.welcome_school_name.setFont(font)
        self.welcome_school_name.setAlignment(QtCore.Qt.AlignCenter)
        self.welcome_school_name.setObjectName("welcome_school_name")

        self.Date_label = QtWidgets.QLabel(self.centralwidget)
        self.Date_label.setGeometry(QtCore.QRect(-40, 150, 601, 61))
        self.Date_label.setObjectName("Date_label")
        palette = QtGui.QPalette()
        self.Date_label.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("SansSerif")
        font.setPointSize(20)
        self.Date_label.setFont(font)
        self.Date_label.setScaledContents(False)
        self.Date_label.setAlignment(QtCore.Qt.AlignCenter)

        self.Time_label = QtWidgets.QLabel(self.centralwidget)
        self.Time_label.setGeometry(QtCore.QRect(250, 150, 601, 61))
        self.Time_label.setObjectName("Time_label")
        palette = QtGui.QPalette()
        self.Time_label.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("SansSerif")
        font.setPointSize(20)
        self.Time_label.setFont(font)
        self.Time_label.setScaledContents(False)
        self.Time_label.setAlignment(QtCore.Qt.AlignCenter)

        timer = QTimer(self.centralwidget)
        timer.timeout.connect(self.showTime)
        timer.start(1000)

        self.temp = QtWidgets.QLabel(self.centralwidget)
        self.temp.setGeometry(QtCore.QRect(200, 190, 401, 121))
        self.temp.setObjectName("Temp")
        palette = QtGui.QPalette()
        self.temp.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("SansSerif")
        font.setPointSize(15)
        self.temp.setFont(font)
        self.temp.setScaledContents(False)
        self.temp.setAlignment(QtCore.Qt.AlignCenter)

        owm = OWM('4873b42104039d4d121280efa2e8b03d')
        mgr = owm.weather_manager()
        observation = mgr.weather_at_place('Kerala,IN')
        global weather, temperature
        weather = observation.weather
        temperature = weather.temperature('celsius')

        self.Academics = QtWidgets.QPushButton(self.centralwidget, clicked=lambda: self.openWindow('Academics_Win'))
        self.Academics.setGeometry(QtCore.QRect(90, 300, 261, 91))
        font = QtGui.QFont()
        font.setFamily("Sans Serif Collection")
        font.setPointSize(buttonFontsize)
        self.Academics.setFont(font)
        self.Academics.setObjectName("Academics")
        self.Academics.clicked.connect(lambda: self.user_response_button('Academics'))
        self.Facilities = QtWidgets.QPushButton(self.centralwidget, clicked=lambda: self.openWindow('Facilities_Win'))
        self.Facilities.setGeometry(QtCore.QRect(460, 300, 261, 91))
        font = QtGui.QFont()
        font.setFamily("Sans Serif Collection")
        font.setPointSize(buttonFontsize)
        self.Facilities.setFont(font)
        self.Facilities.setObjectName("Facilities")
        self.Facilities.clicked.connect(lambda: self.user_response_button('Facilities'))
        self.Faculty = QtWidgets.QPushButton(self.centralwidget, clicked=lambda: self.openWindow('Faculty_Win'))
        self.Faculty.setGeometry(QtCore.QRect(90, 450, 261, 91))
        font = QtGui.QFont()
        font.setFamily("Sans Serif Collection")
        font.setPointSize(buttonFontsize)
        self.Faculty.setFont(font)
        self.Faculty.setObjectName("Faculty")
        self.Faculty.clicked.connect(lambda: self.user_response_button('Faculty'))
        self.Bus_Times = QtWidgets.QPushButton(self.centralwidget, clicked=lambda: self.openWindow('BusTimes_Win'))
        self.Bus_Times.setGeometry(QtCore.QRect(460, 450, 261, 91))
        font = QtGui.QFont()
        font.setFamily("Sans Serif Collection")
        font.setPointSize(buttonFontsize)
        self.Bus_Times.setFont(font)
        self.Bus_Times.setObjectName("Bus_Times")
        self.Bus_Times.clicked.connect(lambda: self.user_response_button('Bus_Times'))
        self.aboutUs = QtWidgets.QPushButton(self.centralwidget, clicked=lambda: self.openWindow('aboutUs_Win'))
        self.aboutUs.setGeometry(QtCore.QRect(275, 600, 261, 91))
        font = QtGui.QFont()
        font.setFamily("Sans Serif Collection")
        font.setPointSize(buttonFontsize)
        self.aboutUs.setFont(font)
        self.aboutUs.setObjectName("aboutUs")
        self.aboutUs.setText("About Us")
        self.aboutUs.clicked.connect(lambda: self.user_response_button('aboutUs'))

        self.slideshow = QtWidgets.QLabel(self.centralwidget)
        self.slideshow.setGeometry(QtCore.QRect(760, 130, 451, 561))
        self.slideshow.setObjectName("label")
        self.image_index=0
        self.images =  []
        for i in entries:
            self.images.append('slideshow/'+i)
        self.show_image()
        print(entries)

        self.timer =QTimer(self.centralwidget)
        self.timer.timeout.connect(self.show_next_image)
        self.timer.start(5000)

        self.welcome_school_name.raise_()
        self.Academics.raise_()
        self.Facilities.raise_()
        self.Faculty.raise_()
        self.Bus_Times.raise_()
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Main Window"))
        self.welcome_school_name.setText(_translate("MainWindow", "Welcome to Mar Thoma Senior Secondary School "))
        self.Academics.setText(_translate("MainWindow", "Academics"))
        self.Facilities.setText(_translate("MainWindow", "Facilities"))
        self.Faculty.setText(_translate("MainWindow", "Faculty"))
        self.Bus_Times.setText(_translate("MainWindow", "Bus Information"))
        now = QDate.currentDate()
        self.Date_label.setText("Date: "+now.toString(Qt.DefaultLocaleLongDate))
        self.temp.setText(str("Weather: "+str(temperature['temp'])+"â„ƒ  with "+weather.detailed_status))


    def user_response_button(self, button):
        """
        This function prints which button(s) user has clicked

        :param button:
        :return string:
        """
        if button == 'Academics':
            print("Academics Clicked")
        elif button == 'Facilities':
            print("Facilities Clicked")
        elif button == "Faculty":
            print("Faculty Clicked")
        elif button == "Bus_Times":
            print("Bus Times Clicked")
        else:
            print("About Us Clicked")

    def openWindow(self, window):
        """
        This function is responsible for opening different windows based off the buttons
        from the main window

        :param window:
        :return:
        """
        if window == 'Academics_Win':
            self.window = QtWidgets.QMainWindow()
            self.ui = Ui_Academics()
            self.ui.setupUi(self.window)
            self.window.show()
            print("Academics Window Opened")
        elif window == 'Facilities_Win':
            self.window = QtWidgets.QMainWindow()
            self.ui = Ui_Facilities()
            self.ui.setupUi(self.window)
            self.window.show()
            print("Facilities Window Opened")
        elif window == 'Faculty_Win':
            self.window = QtWidgets.QMainWindow()
            self.ui = Ui_Faculty()
            self.ui.setupUi(self.window)
            self.window.show()
            print("Facilities Window Opened")
        elif window == "BusTimes_Win":
            self.window = QtWidgets.QMainWindow()
            self.ui = Ui_busInfo()
            self.ui.setupUi(self.window)
            self.window.show()
            print("Bus Times Window Opened")
        else:
            self.window = QtWidgets.QMainWindow()
            self.ui = Ui_aboutUs()
            self.ui.setupUi(self.window)
            self.window.show()
            print("About Us Window Opened")

    def showTime(self):
        """
        This function is used to display time in the format of 'h:mm:ss:A'
        :return:
        """
        time = QTime.currentTime()
        self.Time_label.setText("Time: "+time.toString('h:mm:ss:A'))

    def show_image(self):
        pixmap = QPixmap(self.images[self.image_index])
        self.slideshow.setPixmap(pixmap)
        self.slideshow.setAlignment(Qt.AlignCenter)
        self.slideshow.setScaledContents(True)

    def show_next_image(self):
        self.timer.stop()
        self.image_index += 1
        if self.image_index >= len(self.images):
            self.image_index = 0
        self.show_image()
        self.timer.start(5000)

    def show_previous_image(self):
        self.timer.stop()
        self.image_index -= 1
        if self.image_index < 0:
            self.image_index = len(self.images) - 1
        self.show_image()
        self.timer.start(5000)



if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
